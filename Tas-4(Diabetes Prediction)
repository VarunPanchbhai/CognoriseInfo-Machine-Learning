import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report


data = pd.read_csv('diabetes_prediction_dataset.csv')

print(data.head())

X = data.drop(['diabetes'], axis=1)
y = data['diabetes']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)





import numpy as np
from sklearn.preprocessing import OneHotEncoder
numerical_cols = ['age', 'hypertension', 'heart_disease', 'bmi', 'HbA1c_level', 'blood_glucose_level']
categorical_cols = ['gender', 'smoking_history']


numerical_imputer = SimpleImputer(strategy='mean')
X_train_numerical = numerical_imputer.fit_transform(X_train[numerical_cols])
X_test_numerical = numerical_imputer.transform(X_test[numerical_cols])


scaler = StandardScaler()
X_train_numerical = scaler.fit_transform(X_train_numerical)
X_test_numerical = scaler.transform(X_test_numerical)



encoder = OneHotEncoder(drop='first', sparse=False)
X_train_categorical = encoder.fit_transform(X_train[categorical_cols])
X_test_categorical = encoder.transform(X_test[categorical_cols])

X_train_processed = np.hstack((X_train_numerical, X_train_categorical))
X_test_processed = np.hstack((X_test_numerical, X_test_categorical))



from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeClassifier
import pandas as pd


label_encoder = LabelEncoder()
data['gender'] = label_encoder.fit_transform(data['gender'])
data['smoking_history'] = label_encoder.fit_transform(data['smoking_history'])


X = data.drop(['diabetes'], axis=1)
y = data['diabetes']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

rf = RandomForestClassifier()
knn = KNeighborsClassifier()
adaboost = AdaBoostClassifier()
lr = LinearRegression()
dt = DecisionTreeClassifier()

rf.fit(X_train_scaled, y_train)
knn.fit(X_train_scaled, y_train)
adaboost.fit(X_train_scaled, y_train)
dt.fit(X_train_scaled, y_train)



from sklearn.metrics import accuracy_score, classification_report
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
import pandas as pd

label_encoder = LabelEncoder()
data['gender'] = label_encoder.fit_transform(data['gender'])
data['smoking_history'] = label_encoder.fit_transform(data['smoking_history'])

X = data.drop(['diabetes'], axis=1)
y = data['diabetes']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)


rf = RandomForestClassifier()
knn = KNeighborsClassifier()
adaboost = AdaBoostClassifier()
lr = LinearRegression()
dt = DecisionTreeClassifier()

rf.fit(X_train_scaled, y_train)
knn.fit(X_train_scaled, y_train)
adaboost.fit(X_train_scaled, y_train)
dt.fit(X_train_scaled, y_train)

lr.fit(X_train_scaled, y_train)


def evaluate_model(model, X_test, y_test):
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred.round())
    report = classification_report(y_test, y_pred.round())
    return accuracy, report


models = {'Random Forest': rf,
          'K-Nearest Neighbors': knn,
          'AdaBoost': adaboost,
          'Linear Regression': lr,
          'Decision Tree': dt}

for name, model in models.items():
    accuracy, report = evaluate_model(model, X_test_scaled, y_test)
    print(f"=== {name} ===")
    print(f"Accuracy: {accuracy}")
    print(f"Classification Report:\n{report}\n")
